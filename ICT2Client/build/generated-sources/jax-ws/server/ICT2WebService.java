
package server;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "ICT2WebService", targetNamespace = "http://server/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ICT2WebService {


    /**
     * 
     * @param d1
     * @param d2
     * @return
     *     returns java.lang.Double
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "product", targetNamespace = "http://server/", className = "server.Product")
    @ResponseWrapper(localName = "productResponse", targetNamespace = "http://server/", className = "server.ProductResponse")
    @Action(input = "http://server/ICT2WebService/productRequest", output = "http://server/ICT2WebService/productResponse")
    public Double product(
        @WebParam(name = "d1", targetNamespace = "")
        Double d1,
        @WebParam(name = "d2", targetNamespace = "")
        Double d2);

    /**
     * 
     * @param d
     * @return
     *     returns java.lang.Boolean
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addDoubleOnServer", targetNamespace = "http://server/", className = "server.AddDoubleOnServer")
    @ResponseWrapper(localName = "addDoubleOnServerResponse", targetNamespace = "http://server/", className = "server.AddDoubleOnServerResponse")
    @Action(input = "http://server/ICT2WebService/addDoubleOnServerRequest", output = "http://server/ICT2WebService/addDoubleOnServerResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/ICT2WebService/addDoubleOnServer/Fault/Exception")
    })
    public Boolean addDoubleOnServer(
        @WebParam(name = "d", targetNamespace = "")
        Double d)
        throws Exception_Exception
    ;

    /**
     * 
     * @param d1
     * @param d2
     * @return
     *     returns java.lang.Double
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "safeProduct", targetNamespace = "http://server/", className = "server.SafeProduct")
    @ResponseWrapper(localName = "safeProductResponse", targetNamespace = "http://server/", className = "server.SafeProductResponse")
    @Action(input = "http://server/ICT2WebService/safeProductRequest", output = "http://server/ICT2WebService/safeProductResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/ICT2WebService/safeProduct/Fault/Exception")
    })
    public Double safeProduct(
        @WebParam(name = "d1", targetNamespace = "")
        Double d1,
        @WebParam(name = "d2", targetNamespace = "")
        Double d2)
        throws Exception_Exception
    ;

    /**
     * 
     * @param d
     * @return
     *     returns java.util.List<java.lang.Object>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllDoubleSamplesBelow", targetNamespace = "http://server/", className = "server.GetAllDoubleSamplesBelow")
    @ResponseWrapper(localName = "getAllDoubleSamplesBelowResponse", targetNamespace = "http://server/", className = "server.GetAllDoubleSamplesBelowResponse")
    @Action(input = "http://server/ICT2WebService/getAllDoubleSamplesBelowRequest", output = "http://server/ICT2WebService/getAllDoubleSamplesBelowResponse")
    public List<Object> getAllDoubleSamplesBelow(
        @WebParam(name = "d", targetNamespace = "")
        Double d);

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "testConnection", targetNamespace = "http://server/", className = "server.TestConnection")
    @ResponseWrapper(localName = "testConnectionResponse", targetNamespace = "http://server/", className = "server.TestConnectionResponse")
    @Action(input = "http://server/ICT2WebService/testConnectionRequest", output = "http://server/ICT2WebService/testConnectionResponse")
    public String testConnection();

    /**
     * 
     * @return
     *     returns java.lang.Double
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSmallestDouble", targetNamespace = "http://server/", className = "server.GetSmallestDouble")
    @ResponseWrapper(localName = "getSmallestDoubleResponse", targetNamespace = "http://server/", className = "server.GetSmallestDoubleResponse")
    @Action(input = "http://server/ICT2WebService/getSmallestDoubleRequest", output = "http://server/ICT2WebService/getSmallestDoubleResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/ICT2WebService/getSmallestDouble/Fault/Exception")
    })
    public Double getSmallestDouble()
        throws Exception_Exception
    ;

}
